
sampler2D g_Texture : register(s0);
sampler2D g_ShadowTexture : register(s1);

#define SMAP_SIZE  2048
#define SHADOW_EPSILON 0.008f


struct PS_INPUT
{
    float4 position  : POSITION;
	float3 normal	 : TEXCOORD1;
	float3 direction : TEXCOORD2;
	float3 viewDir	 : TEXCOORD3;
    float4 diffuse   : COLOR0;
    float4 specular  : COLOR1;
    float2 texCoords : TEXCOORD0;
    float  fog       : FOG;
     float4 vPosLight : TEXCOORD4;
};

float4 main(PS_INPUT input) : COLOR0
{

	float ndotl = dot(input.normal, (input.direction));
	float specular = 0;
	float4 ambient = {.2,.2,.2,.2};
	if( ndotl > 0)
	{
		const float3 Reflection = 2 * input.normal * ndotl - (input.direction);
		float vdotr = dot(Reflection, input.viewDir);
		if( vdotr > 0 )
		{
			   specular = pow(vdotr, 32);
		}
	}
	
	float4 light= ndotl * tex2D(g_Texture, input.texCoords)*input.diffuse + input.specular * specular;
	
	float4 shadow;
	if( ndotl > .2f )
	{
		float2 shadowloc = input.vPosLight.xy / input.vPosLight.w;
		float2 ShadowTexC =  .5f * shadowloc + float2( 0.5, 0.5 );
		ShadowTexC.y = 1.0f - ShadowTexC.y;
        
		// transform to texel space
		float2 texelpos = SMAP_SIZE * ShadowTexC;
        
		// Determine the lerp amounts           
		float2 lerps = frac( texelpos );

		//read in bilerp stamp, doing the shadow checks
		float sourcevals[4] = {0,0,0,0};
		float val = input.vPosLight.z / input.vPosLight.w;
      //  sourcevals[0] = (tex2D( g_ShadowTexture, ShadowTexC ) + SHADOW_EPSILON < val)? 0.0f: 1.0f;  
      //  sourcevals[1] = (tex2D( g_ShadowTexture, ShadowTexC + float2(1.0/SMAP_SIZE, 0) ) + SHADOW_EPSILON < val)? 0.0f: 1.0f;  
      //  sourcevals[2] = (tex2D( g_ShadowTexture, ShadowTexC + float2(0, 1.0/SMAP_SIZE) ) + SHADOW_EPSILON < val)? 0.0f: 1.0f;  
        //sourcevals[3] =    
    
		shadow = (tex2D( g_ShadowTexture, ShadowTexC + float2(1.0/SMAP_SIZE, 1.0/SMAP_SIZE) ));
		shadow.r = ((shadow.r + SHADOW_EPSILON < val) /*&& (shadowloc.x > 0 || shadowloc.y > 0)*/)? 0.4f: 1.f; 
    
        // lerp between the shadow values to calculate our light amount
       // float LightAmount = lerp( lerp( sourcevals[0], sourcevals[1], lerps.x ),
         //                         lerp( sourcevals[2], sourcevals[3], lerps.x ),
         //                         lerps.y );
	
	}
	else
	{
		light = tex2D(g_Texture, input.texCoords)*ambient;
		shadow.r = 1.f;
	}
	
	// return the final light color
	return light*shadow.r;
}
